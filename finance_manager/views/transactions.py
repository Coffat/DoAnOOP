import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import customtkinter as ctk
from tkinter import ttk, messagebox
from datetime import datetime
from finance_manager.models.transaction import Transaction
from finance_manager.models.account import Account
from finance_manager.config.settings import EXPENSE_CATEGORIES, INCOME_CATEGORIES
from finance_manager.models.saving import Saving
from .dialog import Dialog

class TransactionsView:
    def __init__(self, parent):
        self.parent = parent
        self.tree = None
        self.dialog = None
        
    def show(self):
        # X√≥a n·ªôi dung c≈©
        for widget in self.parent.winfo_children():
            widget.destroy()
            
        self.create_title()
        self.create_add_button()
        self.show_transactions_list()
        
    def create_title(self):
        title = ctk.CTkLabel(
            self.parent,
            text="Qu·∫£n L√Ω Giao D·ªãch",
            font=("Helvetica", 24, "bold")
        )
        title.pack(pady=20)
        
    def create_add_button(self):
        button_frame = ctk.CTkFrame(self.parent)
        button_frame.pack(pady=10)
        
        add_btn = ctk.CTkButton(
            button_frame,
            text="üí∞ Th√™m Giao D·ªãch M·ªõi",
            command=self.show_add_dialog,
            font=("Helvetica", 13, "bold"),
            fg_color="#2ecc71",
            hover_color="#27ae60"
        )
        add_btn.pack(side="left", padx=5)
        
        edit_btn = ctk.CTkButton(
            button_frame,
            text="‚úèÔ∏è Ch·ªânh S·ª≠a",
            command=self.edit_selected_transaction,
            font=("Helvetica", 13, "bold"),
            fg_color="#3498db",
            hover_color="#2980b9"
        )
        edit_btn.pack(side="left", padx=5)
        
        delete_btn = ctk.CTkButton(
            button_frame,
            text="üóëÔ∏è X√≥a",
            command=self.delete_selected_transaction,
            font=("Helvetica", 13, "bold"),
            fg_color="#e74c3c",
            hover_color="#c0392b"
        )
        delete_btn.pack(side="left", padx=5)
        
    def show_transactions_list(self):
        frame = ctk.CTkFrame(self.parent)
        frame.pack(fill="both", padx=20, pady=10, expand=True)
        
        # T·∫°o scrollbar
        scrollbar = ttk.Scrollbar(frame)
        scrollbar.pack(side="right", fill="y")
        
        # T·∫°o treeview v·ªõi scrollbar
        columns = ('ID', 'Ng√†y', 'Lo·∫°i', 'S·ªë Ti·ªÅn', 'Danh M·ª•c', 'T√†i Kho·∫£n', 'Ghi Ch√∫')
        self.tree = ttk.Treeview(frame, columns=columns, show='headings', 
                                yscrollcommand=scrollbar.set, height=20)
        
        scrollbar.config(command=self.tree.yview)
        
        # C·∫•u h√¨nh c√°c c·ªôt
        self.tree.heading('ID', text='ID')
        self.tree.heading('Ng√†y', text='Ng√†y')
        self.tree.heading('Lo·∫°i', text='Lo·∫°i')
        self.tree.heading('S·ªë Ti·ªÅn', text='S·ªë Ti·ªÅn')
        self.tree.heading('Danh M·ª•c', text='Danh M·ª•c')
        self.tree.heading('T√†i Kho·∫£n', text='T√†i Kho·∫£n')
        self.tree.heading('Ghi Ch√∫', text='Ghi Ch√∫')
        
        # ƒê·∫∑t ƒë·ªô r·ªông c·ªôt ph√π h·ª£p
        self.tree.column('ID', width=50, minwidth=50)
        self.tree.column('Ng√†y', width=100, minwidth=100)
        self.tree.column('Lo·∫°i', width=100, minwidth=100)
        self.tree.column('S·ªë Ti·ªÅn', width=150, minwidth=150)
        self.tree.column('Danh M·ª•c', width=200, minwidth=200)
        self.tree.column('T√†i Kho·∫£n', width=150, minwidth=150)
        self.tree.column('Ghi Ch√∫', width=300, minwidth=300)
        
        # T·∫°o style cho Treeview
        style = ttk.Style()
        style.configure("Treeview", 
                       font=('Helvetica', 11),
                       rowheight=30,
                       background="#2c3e50",  # M√†u n·ªÅn t·ªëi
                       foreground="white",     # M√†u ch·ªØ tr·∫Øng
                       fieldbackground="#2c3e50")  # M√†u n·ªÅn cho c√°c √¥
        
        style.configure("Treeview.Heading",
                       font=('Helvetica', 12, 'bold'),
                       background="#34495e",   # M√†u n·ªÅn ti√™u ƒë·ªÅ
                       foreground="white")     # M√†u ch·ªØ ti√™u ƒë·ªÅ
        
        # T·∫°o tags cho m√†u s·∫Øc
        self.tree.tag_configure('income', background='#27ae60')    # Xanh l√° cho thu nh·∫≠p
        self.tree.tag_configure('expense', background='#c0392b')   # ƒê·ªè cho chi ti√™u  
        self.tree.tag_configure('transfer', background='#2980b9')  # Xanh d∆∞∆°ng cho chuy·ªÉn kho·∫£n
        self.tree.tag_configure('saving', background='#f39c12')    # Cam cho ti·∫øt ki·ªám
        
        self.refresh_transactions_list()
        self.tree.pack(fill="both", expand=True, padx=5, pady=5)
        
    def refresh_transactions_list(self):
        """C·∫≠p nh·∫≠t l·∫°i danh s√°ch giao d·ªãch"""
        # X√≥a d·ªØ li·ªáu c≈©
        if self.tree:
            for item in self.tree.get_children():
                self.tree.delete(item)
            
            # L·∫•y mapping t√†i kho·∫£n
            accounts = {acc.account_id: acc.name for acc in Account.get_all()}
            
            # Th√™m d·ªØ li·ªáu m·ªõi
            transactions = Transaction.get_all()
            transactions.sort(key=lambda x: x.transaction_id, reverse=True)
            
            for i, trans in enumerate(transactions):
                # Th√™m icon cho t·ª´ng lo·∫°i giao d·ªãch
                if trans.type == 'Thu nh·∫≠p':
                    icon = "üìà"  # Icon tƒÉng
                    tag = 'income'
                elif trans.type == 'Chi ti√™u':
                    icon = "üìâ"  # Icon gi·∫£m
                    tag = 'expense'
                elif trans.type == 'Chuy·ªÉn ti·ªÅn':
                    icon = "‚ÜîÔ∏è"  # Icon 2 chi·ªÅu
                    tag = 'transfer'
                else:  # G·ª≠i ti·∫øt ki·ªám
                    icon = "üè¶"  # Icon ng√¢n h√†ng
                    tag = 'saving'
                
                item = self.tree.insert('', 'end', values=(
                    trans.transaction_id,
                    trans.date,
                    f"{icon} {trans.type}",  # Th√™m icon v√†o lo·∫°i giao d·ªãch
                    f"{trans.amount:,.0f}",
                    trans.category,
                    accounts.get(trans.account_id, ""),
                    trans.note
                ))
                
                # Th√™m tags cho m√†u s·∫Øc
                self.tree.item(item, tags=(tag,))
            
    def show_add_dialog(self):
        self.dialog = Dialog(self.parent, "Th√™m Giao D·ªãch M·ªõi", size="600x800")  # L∆∞u dialog v√†o instance
        
        # Title
        title_label = ctk.CTkLabel(
            self.dialog.main_frame,
            text="TH√äM GIAO D·ªäCH M·ªöI",
            font=("Helvetica", 20, "bold")
        )
        title_label.pack(pady=(0, 20))

        # Main Content Frame
        content_frame = ctk.CTkFrame(self.dialog.main_frame)
        content_frame.pack(fill="x", padx=20, pady=10)
        
        # 1. Transaction Type Section
        type_frame = self.create_section_frame(content_frame, "1. Lo·∫°i Giao D·ªãch")
        self.type_var = ctk.StringVar(value="Chi ti√™u")
        type_menu = ctk.CTkOptionMenu(
            type_frame,
            values=["Chi ti√™u", "Thu nh·∫≠p", "Chuy·ªÉn ti·ªÅn", "G·ª≠i ti·∫øt ki·ªám"],
            variable=self.type_var,
            width=300,
            command=self.on_transaction_type_change
        )
        type_menu.pack(pady=10)

        # 2. Amount Section
        amount_frame = self.create_section_frame(content_frame, "2. S·ªë Ti·ªÅn")
        self.amount_entry = ctk.CTkEntry(
            amount_frame, 
            width=300,
            placeholder_text="Nh·∫≠p s·ªë ti·ªÅn..."
        )
        self.amount_entry.pack(pady=10)

        # 3. Account Section
        account_frame = self.create_section_frame(content_frame, "3. T√†i Kho·∫£n")
        accounts = Account.get_all()
        account_names = [acc.name for acc in accounts]
        
        self.source_account_var = ctk.StringVar(value=account_names[0] if account_names else "")
        self.source_account_menu = ctk.CTkOptionMenu(
            account_frame,
            values=account_names,
            variable=self.source_account_var,
            width=300,
            command=self.on_account_change
        )
        self.source_account_menu.pack(pady=10)

        # Target Account Frame (for transfers)
        self.target_account_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
        ctk.CTkLabel(
            self.target_account_frame, 
            text="T√†i Kho·∫£n Nh·∫≠n",
            font=("Helvetica", 14, "bold")
        ).pack(pady=5)
        
        self.target_account_var = ctk.StringVar(value=account_names[0] if account_names else "")
        self.target_account_menu = ctk.CTkOptionMenu(
            self.target_account_frame,
            values=account_names,
            variable=self.target_account_var,
            width=300
        )
        self.target_account_menu.pack(pady=10)

        # 4. Category Frame
        self.category_frame = self.create_section_frame(content_frame, "4. Danh M·ª•c")
        self.category_var = ctk.StringVar(value=EXPENSE_CATEGORIES[0])
        self.category_menu = ctk.CTkOptionMenu(
            self.category_frame,
            values=EXPENSE_CATEGORIES,
            variable=self.category_var,
            width=300
        )
        self.category_menu.pack(pady=10)

        # 5. Savings Frame
        self.savings_frame = self.create_section_frame(content_frame, "4. M·ª•c Ti√™u Ti·∫øt Ki·ªám")
        self.savings_var = ctk.StringVar()
        self.savings_menu = ctk.CTkOptionMenu(
            self.savings_frame,
            values=[""],
            variable=self.savings_var,
            width=300
        )
        self.savings_menu.pack(pady=10)
        
        # Savings Info Label
        self.goal_info_label = ctk.CTkLabel(
            self.savings_frame,
            text="",
            font=("Helvetica", 12)
        )
        self.goal_info_label.pack(pady=5)

        # 6. Note Section
        note_frame = self.create_section_frame(content_frame, "5. Ghi Ch√∫")
        self.note_entry = ctk.CTkEntry(
            note_frame, 
            width=300,
            placeholder_text="Nh·∫≠p ghi ch√∫..."
        )
        self.note_entry.pack(pady=10)

        # Save Button
        save_btn = ctk.CTkButton(
            self.dialog.main_frame,
            text="L∆∞u Giao D·ªãch",
            command=self.save_transaction,
            width=200,
            height=40,
            font=("Helvetica", 14, "bold"),
            fg_color="#2ecc71",
            hover_color="#27ae60"
        )
        save_btn.pack(pady=20)

        # Show initial frame based on transaction type
        self.on_transaction_type_change("Chi ti√™u")

    def create_section_frame(self, parent, title):
        """Helper function ƒë·ªÉ t·∫°o section frame v·ªõi ti√™u ƒë·ªÅ"""
        frame = ctk.CTkFrame(parent)
        frame.pack(fill="x", pady=10)
        
        ctk.CTkLabel(
            frame,
            text=title,
            font=("Helvetica", 14, "bold")
        ).pack(pady=5)
        
        return frame

    def on_account_change(self, *args):
        """C·∫≠p nh·∫≠t danh s√°ch m·ª•c ti√™u ti·∫øt ki·ªám khi thay ƒë·ªïi t√†i kho·∫£n"""
        if self.type_var.get() == "G·ª≠i ti·∫øt ki·ªám":
            self.update_savings_goals()
            
    def update_savings_goals(self, *args):
        """C·∫≠p nh·∫≠t danh s√°ch m·ª•c ti√™u ti·∫øt ki·ªám c·ªßa t√†i kho·∫£n ƒë∆∞·ª£c ch·ªçn"""
        try:
            account = next(acc for acc in Account.get_all() 
                         if acc.name == self.source_account_var.get())
            
            # L·∫•y danh s√°ch m·ª•c ti√™u ti·∫øt ki·ªám c·ªßa t√†i kho·∫£n
            savings = Saving.get_all()
            account_savings = [s for s in savings if s.account_id == account.account_id 
                             and s.current_amount < s.target_amount]
            
            if account_savings:
                goal_names = [s.name for s in account_savings]
                self.savings_menu.configure(values=goal_names)
                self.savings_menu.set(goal_names[0])
                
                # Hi·ªÉn th·ªã th√¥ng tin m·ª•c ti√™u ƒë·∫ßu ti√™n
                saving = account_savings[0]
                self.show_saving_info(saving)
            else:
                self.savings_menu.configure(values=["Kh√¥ng c√≥ m·ª•c ti√™u ch∆∞a ho√†n th√†nh"])
                self.savings_menu.set("Kh√¥ng c√≥ m·ª•c ti√™u ch∆∞a ho√†n th√†nh")
                self.goal_info_label.configure(text="")
                
        except Exception as e:
            print(f"Error in update_savings_goals: {str(e)}")
            
    def show_saving_info(self, saving):
        """Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ m·ª•c ti√™u ti·∫øt ki·ªám"""
        remaining = saving.target_amount - saving.current_amount
        self.goal_info_label.configure(
            text=f"S·ªë ti·ªÅn m·ª•c ti√™u: {saving.target_amount:,.0f} VND\n"
                 f"ƒê√£ ti·∫øt ki·ªám: {saving.current_amount:,.0f} VND\n"
                 f"C√≤n c·∫ßn ti·∫øt ki·ªám: {remaining:,.0f} VND\n"
                 f"Ti·∫øn ƒë·ªô hi·ªán t·∫°i: {saving.progress:.1f}%\n"
                 f"H·∫°n ch√≥t: {saving.deadline}"
        )
            
    def on_savings_goal_change(self, goal_name):
        """X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn m·ª•c ti√™u ti·∫øt ki·ªám kh√°c"""
        try:
            if goal_name not in ["Kh√¥ng c√≥ m·ª•c ti√™u", "Kh√¥ng c√≥ m·ª•c ti√™u ch∆∞a ho√†n th√†nh"]:
                account = next(acc for acc in Account.get_all() 
                             if acc.name == self.source_account_var.get())
                saving = next(s for s in Saving.get_all() 
                            if s.account_id == account.account_id and s.name == goal_name)
                self.show_saving_info(saving)
        except Exception as e:
            print(f"Error in on_savings_goal_change: {str(e)}")

    def save_transaction(self):
        try:
            # Validate amount
            if not self.amount_entry.get().strip():
                messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn!")
                return
                
            try:
                amount = float(self.amount_entry.get())
                if amount <= 0:
                    messagebox.showerror("L·ªói", "S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0!")
                    return
            except ValueError:
                messagebox.showerror("L·ªói", "S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!")
                return
            
            trans_type = self.type_var.get()
            
            # L·∫•y th√¥ng tin t√†i kho·∫£n ngu·ªìn
            source_account = next(acc for acc in Account.get_all() 
                                if acc.name == self.source_account_var.get())
            
            # X·ª≠ l√Ω theo lo·∫°i giao d·ªãch
            if trans_type == "Chuy·ªÉn ti·ªÅn":
                # Ki·ªÉm tra t√†i kho·∫£n ngu·ªìn v√† ƒë√≠ch kh√¥ng ƒë∆∞·ª£c tr√πng nhau
                if self.source_account_var.get() == self.target_account_var.get():
                    messagebox.showerror("L·ªói", "T√†i kho·∫£n ngu·ªìn v√† ƒë√≠ch kh√¥ng ƒë∆∞·ª£c tr√πng nhau!")
                    return
                    
                # L·∫•y t√†i kho·∫£n ƒë√≠ch
                target_account = next(acc for acc in Account.get_all() 
                                    if acc.name == self.target_account_var.get())
                
                # Ki·ªÉm tra n·∫øu c√≥ t√†i kho·∫£n ti·ªÅn m·∫∑t
                if source_account.type == "Ti·ªÅn m·∫∑t" or target_account.type == "Ti·ªÅn m·∫∑t":
                    # T·∫°o giao d·ªãch v·ªõi ghi ch√∫ error
                    transactions = Transaction.get_all()
                    new_id = len(transactions) + 1
                    
                    transaction = Transaction(
                        transaction_id=new_id,
                        date=datetime.now().strftime("%Y-%m-%d"),
                        type=trans_type,
                        amount=amount,
                        category=f"Chuy·ªÉn ti·ªÅn t·ª´ {source_account.name} ƒë·∫øn {target_account.name}",
                        account_id=source_account.account_id,
                        note="error"
                    )
                    transaction.save()
                    
                    # Th√¥ng b√°o l·ªói
                    messagebox.showerror(
                        "Th√¥ng b√°o",
                        "Giao d·ªãch kh√¥ng th√†nh c√¥ng!\n\n"
                        "L√Ω do: Kh√¥ng th·ªÉ chuy·ªÉn kho·∫£n v·ªõi t√†i kho·∫£n ti·ªÅn m·∫∑t.\n"
                        "Giao d·ªãch ƒë√£ ƒë∆∞·ª£c l∆∞u v·ªõi ghi ch√∫ 'error'."
                    )
                    
                else:
                    # Ki·ªÉm tra s·ªë d∆∞ t√†i kho·∫£n ngu·ªìn
                    if source_account.balance < amount:
                        messagebox.showerror("L·ªói", "S·ªë d∆∞ t√†i kho·∫£n kh√¥ng ƒë·ªß!")
                        return
                        
                    # C·∫≠p nh·∫≠t s·ªë d∆∞ c√°c t√†i kho·∫£n
                    source_account.balance -= amount
                    target_account.balance += amount
                    
                    source_account.save()
                    target_account.save()
                    
                    # T·∫°o giao d·ªãch chuy·ªÉn ti·ªÅn th√†nh c√¥ng
                    transactions = Transaction.get_all()
                    new_id = len(transactions) + 1
                    
                    transaction = Transaction(
                        transaction_id=new_id,
                        date=datetime.now().strftime("%Y-%m-%d"),
                        type=trans_type,
                        amount=amount,
                        category=f"Chuy·ªÉn ti·ªÅn t·ª´ {source_account.name} ƒë·∫øn {target_account.name}",
                        account_id=source_account.account_id,
                        note=self.note_entry.get()
                    )
                    transaction.save()
                    
                    messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ chuy·ªÉn ti·ªÅn th√†nh c√¥ng!")
                
            elif trans_type == "G·ª≠i ti·∫øt ki·ªám":
                # Ki·ªÉm tra c√≥ ch·ªçn m·ª•c ti√™u ti·∫øt ki·ªám kh√¥ng
                if not hasattr(self, 'savings_var') or not self.savings_var.get():
                    messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn m·ª•c ti√™u ti·∫øt ki·ªám!")
                    return
                
                # Ki·ªÉm tra s·ªë d∆∞ t√†i kho·∫£n
                if source_account.balance < amount:
                    messagebox.showerror("L·ªói", "S·ªë d∆∞ t√†i kho·∫£n kh√¥ng ƒë·ªß!")
                    return
                    
                # L·∫•y m·ª•c ti√™u ti·∫øt ki·ªám
                saving = next((s for s in Saving.get_all() 
                             if s.name == self.savings_var.get()), None)
                
                if not saving:
                    messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y m·ª•c ti√™u ti·∫øt ki·ªám!")
                    return
                
                # C·∫≠p nh·∫≠t s·ªë d∆∞ t√†i kho·∫£n v√† s·ªë ti·ªÅn ti·∫øt ki·ªám
                source_account.balance -= amount
                saving.current_amount += amount
                
                source_account.save()
                saving.save()
                
                # T·∫°o giao d·ªãch ti·∫øt ki·ªám
                transactions = Transaction.get_all()
                new_id = len(transactions) + 1
                
                transaction = Transaction(
                    transaction_id=new_id,
                    date=datetime.now().strftime("%Y-%m-%d"),
                    type=trans_type,
                    amount=amount,
                    category=saving.name,
                    account_id=source_account.account_id,
                    note=self.note_entry.get()
                )
                transaction.save()
                
            else:  # Thu nh·∫≠p ho·∫∑c Chi ti√™u
                # Ki·ªÉm tra danh m·ª•c
                if not hasattr(self, 'category_var') or not self.category_var.get():
                    messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn danh m·ª•c!")
                    return
                
                # Ki·ªÉm tra s·ªë d∆∞ v·ªõi giao d·ªãch chi ti√™u
                if trans_type == "Chi ti√™u" and source_account.balance < amount:
                    messagebox.showerror("L·ªói", "S·ªë d∆∞ t√†i kho·∫£n kh√¥ng ƒë·ªß!")
                    return
                
                # C·∫≠p nh·∫≠t s·ªë d∆∞ t√†i kho·∫£n
                if trans_type == "Chi ti√™u":
                    source_account.balance -= amount
                else:  # Thu nh·∫≠p
                    source_account.balance += amount
                    
                source_account.save()
                
                # T·∫°o giao d·ªãch
                transactions = Transaction.get_all()
                new_id = len(transactions) + 1
                
                transaction = Transaction(
                    transaction_id=new_id,
                    date=datetime.now().strftime("%Y-%m-%d"),
                    type=trans_type,
                    amount=amount,
                    category=self.category_var.get(),
                    account_id=source_account.account_id,
                    note=self.note_entry.get()
                )
                transaction.save()
            
            # ƒê√≥ng dialog v√† refresh danh s√°ch
            if self.dialog:
                self.dialog.withdraw()  # ·∫®n dialog tr∆∞·ªõc
                self.dialog.destroy()   # Sau ƒë√≥ h·ªßy
                self.dialog = None      # Reset bi·∫øn dialog
                
            # Refresh danh s√°ch giao d·ªãch
            self.refresh_transactions_list()
            
            # Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
            messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ th√™m giao d·ªãch m·ªõi!")
            
        except Exception as e:
            messagebox.showerror("L·ªói", str(e))
        
    def edit_selected_transaction(self):
        selected_items = self.tree.selection()
        if not selected_items:
            messagebox.showwarning("Cnh b√°o", "Vui l√≤ng ch·ªçn giao d·ªãch c·∫ßn ch·ªânh s·ª≠a!")
            return
            
        item = selected_items[0]
        transaction_id = int(self.tree.item(item)['values'][0])
        
        # L·∫•y th√¥ng tin giao d·ªãch
        transactions = Transaction.get_all()
        transaction = next((t for t in transactions if t.transaction_id == transaction_id), None)
        
        if transaction:
            self.show_edit_dialog(transaction)
            
    def show_edit_dialog(self, transaction):
        dialog = ctk.CTkToplevel(self.parent)
        dialog.title("Ch·ªânh S·ª≠a Giao D·ªãch")
        dialog.geometry("500x700")
        dialog.transient(self.parent)
        dialog.grab_set()
        
        # Transaction Type (disabled for editing)
        ctk.CTkLabel(dialog, text="Lo·∫°i Giao D·ªãch:").pack(pady=5)
        type_var = ctk.StringVar(value=transaction.type)
        type_label = ctk.CTkLabel(dialog, text=transaction.type)
        type_label.pack(pady=5)
        
        # Amount
        ctk.CTkLabel(dialog, text="S·ªë Ti·ªÅn:").pack(pady=5)
        amount_entry = ctk.CTkEntry(dialog)
        amount_entry.insert(0, str(transaction.amount))
        amount_entry.pack(pady=5)
        
        # Account Frame
        account_frame = ctk.CTkFrame(dialog)
        account_frame.pack(pady=5, fill='x', padx=20)
        
        # Get accounts
        accounts = Account.get_all()
        account_names = [acc.name for acc in accounts]
        current_account = next(acc.name for acc in accounts if acc.account_id == transaction.account_id)
        
        if transaction.type == "Chuy·ªÉn ti·ªÅn":
            # Source Account (readonly for transfer)
            ctk.CTkLabel(account_frame, text="T√†i Kho·∫£n Chuy·ªÉn:").pack(pady=5)
            source_label = ctk.CTkLabel(account_frame, text=current_account)
            source_label.pack(pady=5)
            
            # Target Account (from category)
            target_account_name = transaction.category.split(" ƒë·∫øn ")[1]
            ctk.CTkLabel(account_frame, text="T√†i Kho·∫£n Nh·∫≠n:").pack(pady=5)
            target_label = ctk.CTkLabel(account_frame, text=target_account_name)
            target_label.pack(pady=5)
            
        else:
            # Regular transaction account
            ctk.CTkLabel(account_frame, text="T√†i Kho·∫£n:").pack(pady=5)
            account_var = ctk.StringVar(value=current_account)
            account_menu = ctk.CTkOptionMenu(
                account_frame,
                values=account_names,
                variable=account_var
            )
            account_menu.pack(pady=5)
            
            # Category for non-transfer transactions
            ctk.CTkLabel(dialog, text="Danh M·ª•c:").pack(pady=5)
            categories = EXPENSE_CATEGORIES if transaction.type == "Chi ti√™u" else INCOME_CATEGORIES
            category_var = ctk.StringVar(value=transaction.category)
            category_menu = ctk.CTkOptionMenu(
                dialog,
                values=categories,
                variable=category_var
            )
            category_menu.pack(pady=5)
        
        # Date
        ctk.CTkLabel(dialog, text="Ng√†y Giao D·ªãch:").pack(pady=5)
        date_entry = ctk.CTkEntry(dialog)
        date_entry.insert(0, transaction.date)
        date_entry.pack(pady=5)
        
        # Note
        ctk.CTkLabel(dialog, text="Ghi Ch√∫:").pack(pady=5)
        note_entry = ctk.CTkEntry(dialog)
        note_entry.insert(0, transaction.note)
        note_entry.pack(pady=5)
        
        def save_changes():
            try:
                # Validate amount
                new_amount = float(amount_entry.get())
                if new_amount <= 0:
                    messagebox.showerror("L·ªói", "S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0!")
                    return
                
                if transaction.type == "Chuy·ªÉn ti·ªÅn":
                    # Handle transfer transaction
                    source_account = Account.get_by_id(transaction.account_id)
                    target_account_name = transaction.category.split(" ƒë·∫øn ")[1]
                    target_account = next(acc for acc in accounts if acc.name == target_account_name)
                    
                    # Reverse old transfer
                    source_account.balance += transaction.amount
                    target_account.balance -= transaction.amount
                    
                    # Apply new transfer
                    if source_account.balance < new_amount:
                        messagebox.showerror("L·ªói", "S·ªë d∆∞ t√†i kho·∫£n kh√¥ng ƒë·ªß!")
                        return
                        
                    source_account.balance -= new_amount
                    target_account.balance += new_amount
                    
                    source_account.save()
                    target_account.save()
                    
                    # Update transaction
                    transaction.amount = new_amount
                    transaction.date = date_entry.get()
                    transaction.note = note_entry.get()
                    
                else:
                    # Handle regular transaction
                    old_account = Account.get_by_id(transaction.account_id)
                    new_account = next(acc for acc in accounts if acc.name == account_var.get())
                    
                    # Reverse old transaction
                    if transaction.type == "Chi ti√™u":
                        old_account.balance += transaction.amount
                    else:  # Thu nh·∫≠p
                        old_account.balance -= transaction.amount
                    
                    # Apply new transaction
                    if transaction.type == "Chi ti√™u" and new_account.balance < new_amount:
                        messagebox.showerror("L·ªói", "S·ªë d∆∞ t√†i kho·∫£n kh√¥ng ƒë·ªß!")
                        return
                        
                    if transaction.type == "Chi ti√™u":
                        new_account.balance -= new_amount
                    else:  # Thu nh·∫≠p
                        new_account.balance += new_amount
                    
                    old_account.save()
                    if new_account.account_id != old_account.account_id:
                        new_account.save()
                    
                    # Update transaction
                    transaction.amount = new_amount
                    transaction.date = date_entry.get()
                    transaction.category = category_var.get()
                    transaction.account_id = new_account.account_id
                    transaction.note = note_entry.get()
                
                transaction.save()
                dialog.destroy()
                self.refresh_transactions_list()
                messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ c·∫≠p nh·∫≠t giao d·ªãch th√†nh c√¥ng!")
                
            except ValueError:
                messagebox.showerror("L·ªói", "S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!")
            except Exception as e:
                messagebox.showerror("L·ªói", str(e))
                
        save_btn = ctk.CTkButton(dialog, text="L∆∞u Thay ƒê·ªïi", command=save_changes)
        save_btn.pack(pady=20)
        
    def delete_selected_transaction(self):
        selected_items = self.tree.selection()
        if not selected_items:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn giao d·ªãch c·∫ßn x√≥a!")
            return
            
        item = selected_items[0]
        transaction_id = int(self.tree.item(item)['values'][0])
        
        if not messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a giao d·ªãch n√†y?"):
            return
            
        try:
            # L·∫•y th√¥ng tin giao d·ªãch tr∆∞·ªõc khi x√≥a
            transactions = Transaction.get_all()
            transaction = next((t for t in transactions if t.transaction_id == transaction_id), None)
            
            if transaction:
                account = Account.get_by_id(transaction.account_id)
                
                if transaction.type == "Chi ti√™u":
                    # Ho√†n l·∫°i ti·ªÅn cho t√†i kho·∫£n chi ti√™u
                    account.balance += transaction.amount
                elif transaction.type == "Thu nh·∫≠p":
                    # Tr·ª´ l·∫°i ti·ªÅn thu nh·∫≠p
                    account.balance -= transaction.amount
                elif transaction.type == "Chuy·ªÉn ti·ªÅn":
                    # L·∫•y th√¥ng tin t√†i kho·∫£n ngu·ªìn v√† ƒë√≠ch t·ª´ category
                    source_account_name = transaction.category.split(" t·ª´ ")[1].split(" ƒë·∫øn ")[0]
                    target_account_name = transaction.category.split(" ƒë·∫øn ")[1]
                    
                    source_account = next(acc for acc in Account.get_all() if acc.name == source_account_name)
                    target_account = next(acc for acc in Account.get_all() if acc.name == target_account_name)
                    
                    # Ho√†n l·∫°i ti·ªÅn cho t√†i kho·∫£n ngu·ªìn v√† tr·ª´ ti·ªÅn t√†i kho·∫£n ƒë√≠ch
                    source_account.balance += transaction.amount
                    target_account.balance -= transaction.amount
                    
                    source_account.save()
                    target_account.save()
                
                # L∆∞u thay ƒë·ªïi s·ªë d∆∞ t√†i kho·∫£n
                if transaction.type != "Chuy·ªÉn ti·ªÅn":
                    account.save()
                
                # X√≥a giao d·ªãch
                Transaction.delete(transaction_id)
                self.refresh_transactions_list()
                
                # Hi·ªÉn th·ªã th√¥ng b√°o chi ti·∫øt
                if transaction.type == "Chuy·ªÉn ti·ªÅn":
                    messagebox.showinfo("Th√†nh c√¥ng", 
                                      f"ƒê√£ x√≥a giao d·ªãch v√† ho√†n l·∫°i ti·ªÅn:\n"
                                      f"- T√†i kho·∫£n {source_account_name}: +{transaction.amount:,.0f} VND\n"
                                      f"- T√†i kho·∫£n {target_account_name}: -{transaction.amount:,.0f} VND")
                else:
                    messagebox.showinfo("Th√†nh c√¥ng", 
                                      f"ƒê√£ x√≥a giao d·ªãch v√† {'ho√†n l·∫°i' if transaction.type == 'Chi ti√™u' else 'tr·ª´'} "
                                      f"{transaction.amount:,.0f} VND cho t√†i kho·∫£n {account.name}")
                
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ x√≥a giao d·ªãch: {str(e)}") 

    def on_transaction_type_change(self, trans_type):
        """C·∫≠p nh·∫≠t giao di·ªán d·ª±a tr√™n lo·∫°i giao d·ªãch ƒë∆∞·ª£c ch·ªçn"""
        # Hide all optional frames first
        self.category_frame.pack_forget()
        self.target_account_frame.pack_forget()
        self.savings_frame.pack_forget()
        
        # Validate transfer if needed
        if trans_type == "Chuy·ªÉn ti·ªÅn":
            # L·∫•y th√¥ng tin t√†i kho·∫£n ngu·ªìn
            accounts = Account.get_all()
            source_account = next(acc for acc in accounts 
                                if acc.name == self.source_account_var.get())
            
            # Ki·ªÉm tra n·∫øu l√† t√†i kho·∫£n ti·ªÅn m·∫∑t
            if source_account.type == "Ti·ªÅn m·∫∑t":
                messagebox.showerror(
                    "Th√¥ng b√°o",
                    "Kh√¥ng th·ªÉ th·ª±c hi·ªán chuy·ªÉn kho·∫£n!\n\n"
                    "L√Ω do: T√†i kho·∫£n ti·ªÅn m·∫∑t kh√¥ng th·ªÉ th·ª±c hi·ªán chuy·ªÉn kho·∫£n.\n"
                    "Vui l√≤ng s·ª≠ d·ª•ng t√†i kho·∫£n ng√¢n h√†ng ho·∫∑c v√≠ ƒëi·ªán t·ª≠ ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch n√†y."
                )
                # Reset l·∫°i lo·∫°i giao d·ªãch
                self.type_var.set("Chi ti√™u")
                return
            
            # Show target account frame
            self.target_account_frame.pack(pady=5, fill='x', padx=20)
            
        elif trans_type == "Chi ti√™u":
            self.category_menu.configure(values=EXPENSE_CATEGORIES)
            self.category_var.set(EXPENSE_CATEGORIES[0])
            self.category_frame.pack(pady=5, fill='x', padx=20)
            
        elif trans_type == "Thu nh·∫≠p":
            self.category_menu.configure(values=INCOME_CATEGORIES)
            self.category_var.set(INCOME_CATEGORIES[0])
            self.category_frame.pack(pady=5, fill='x', padx=20)
            
        else:  # G·ª≠i ti·∫øt ki·ªám
            self.savings_frame.pack(pady=5, fill='x', padx=20)
            self.update_savings_goals() 