import customtkinter as ctk
from tkinter import ttk, messagebox
from datetime import datetime, timedelta
from models.saving import Saving
from models.account import Account

class SavingsView:
    def __init__(self, parent):
        self.parent = parent
        self.tree = None
        
    def show(self):
        self.create_title()
        self.create_buttons()
        self.show_savings_list()
        
    def create_title(self):
        title = ctk.CTkLabel(
            self.parent,
            text="Qu·∫£n L√Ω Ti·∫øt Ki·ªám",
            font=("Helvetica", 24, "bold")
        )
        title.pack(pady=20)
        
    def create_buttons(self):
        button_frame = ctk.CTkFrame(self.parent)
        button_frame.pack(pady=10)
        
        add_btn = ctk.CTkButton(
            button_frame,
            text="üéØ Th√™m M·ª•c Ti√™u M·ªõi",
            command=self.show_add_dialog,
            font=("Helvetica", 13, "bold"),
            fg_color="#2ecc71",
            hover_color="#27ae60"
        )
        add_btn.pack(side="left", padx=5)
        
        edit_btn = ctk.CTkButton(
            button_frame,
            text="‚úèÔ∏è Ch·ªânh S·ª≠a",
            command=self.edit_selected_goal,
            font=("Helvetica", 13, "bold"),
            fg_color="#3498db",
            hover_color="#2980b9"
        )
        edit_btn.pack(side="left", padx=5)
        
        delete_btn = ctk.CTkButton(
            button_frame,
            text="üóëÔ∏è X√≥a",
            command=self.delete_selected_goal,
            font=("Helvetica", 13, "bold"),
            fg_color="#e74c3c",
            hover_color="#c0392b"
        )
        delete_btn.pack(side="left", padx=5)
        
    def show_savings_list(self):
        frame = ctk.CTkFrame(self.parent)
        frame.pack(fill="both", padx=20, pady=10, expand=True)
        
        # T·∫°o scrollbar
        scrollbar = ttk.Scrollbar(frame)
        scrollbar.pack(side="right", fill="y")
        
        # T·∫°o treeview v·ªõi scrollbar
        columns = ('ID', 'T√™n M·ª•c Ti√™u', 'T√†i Kho·∫£n', 'S·ªë Ti·ªÅn M·ª•c Ti√™u', 
                  'S·ªë Ti·ªÅn Hi·ªán T·∫°i', 'Ti·∫øn ƒê·ªô', 'H·∫°n Ch√≥t', 'Ghi Ch√∫')
        self.tree = ttk.Treeview(frame, columns=columns, show='headings', 
                                yscrollcommand=scrollbar.set)
        
        scrollbar.config(command=self.tree.yview)
        
        # Style cho Treeview
        style = ttk.Style()
        style.configure("Treeview",
                       font=('Helvetica', 11),
                       rowheight=35,
                       background="#2c3e50",
                       foreground="white",
                       fieldbackground="#2c3e50")
        
        style.configure("Treeview.Heading",
                       font=('Helvetica', 12, 'bold'),
                       background="#34495e",
                       foreground="white")
        
        # Tags cho m√†u s·∫Øc d·ª±a tr√™n ti·∫øn ƒë·ªô
        self.tree.tag_configure('low', background='#e74c3c')      # ƒê·ªè cho ti·∫øn ƒë·ªô th·∫•p (<30%)
        self.tree.tag_configure('medium', background='#f39c12')   # Cam cho ti·∫øn ƒë·ªô trung b√¨nh (30-70%)
        self.tree.tag_configure('high', background='#27ae60')     # Xanh l√° cho ti·∫øn ƒë·ªô cao (>70%)
        self.tree.tag_configure('completed', background='#2ecc71') # Xanh l√° ƒë·∫≠m cho ho√†n th√†nh (100%)
        
        # C·∫•u h√¨nh c·ªôt
        self.tree.column('ID', width=50)
        self.tree.column('T√™n M·ª•c Ti√™u', width=200)
        self.tree.column('T√†i Kho·∫£n', width=150)
        self.tree.column('S·ªë Ti·ªÅn M·ª•c Ti√™u', width=150)
        self.tree.column('S·ªë Ti·ªÅn Hi·ªán T·∫°i', width=150)
        self.tree.column('Ti·∫øn ƒê·ªô', width=100)
        self.tree.column('H·∫°n Ch√≥t', width=100)
        self.tree.column('Ghi Ch√∫', width=200)
        
        for col in columns:
            self.tree.heading(col, text=col)
        
        self.refresh_savings_list()
        self.tree.pack(fill="both", expand=True, padx=5, pady=5)
        
    def refresh_savings_list(self):
        for item in self.tree.get_children():
            self.tree.delete(item)
            
        for saving in Saving.get_all():
            # X√°c ƒë·ªãnh icon v√† m√†u s·∫Øc d·ª±a tr√™n ti·∫øn ƒë·ªô
            progress = saving.progress
            if progress >= 100:
                tag = 'completed'
                progress_icon = "üéâ"  # Icon ƒÉn m·ª´ng
            elif progress > 70:
                tag = 'high'
                progress_icon = "üöÄ"  # Icon t√™n l·ª≠a
            elif progress > 30:
                tag = 'medium'
                progress_icon = "üìà"  # Icon tƒÉng tr∆∞·ªüng
            else:
                tag = 'low'
                progress_icon = "üéØ"  # Icon m·ª•c ti√™u
            
            self.tree.insert('', 'end', values=(
                saving.goal_id,
                f"{progress_icon} {saving.name}",  # Th√™m icon v√†o t√™n m·ª•c ti√™u
                saving.account_name,
                f"{saving.target_amount:,.0f}",
                f"{saving.current_amount:,.0f}",
                f"{saving.progress:.1f}%",
                saving.deadline,
                saving.note
            ), tags=(tag,))
            
    def show_add_dialog(self):
        dialog = ctk.CTkToplevel(self.parent)
        dialog.title("Th√™m M·ª•c Ti√™u Ti·∫øt Ki·ªám")
        dialog.geometry("500x600")
        dialog.transient(self.parent)
        dialog.grab_set()
        
        # Goal Name
        ctk.CTkLabel(dialog, text="T√™n M·ª•c Ti√™u:", font=("Helvetica", 14, "bold")).pack(pady=5)
        name_entry = ctk.CTkEntry(dialog, width=300)
        name_entry.pack(pady=5)
        
        # Account Selection
        ctk.CTkLabel(dialog, text="T√†i Kho·∫£n:", font=("Helvetica", 14, "bold")).pack(pady=5)
        accounts = Account.get_all()
        account_names = [acc.name for acc in accounts]
        account_var = ctk.StringVar(value=account_names[0] if account_names else "")
        account_menu = ctk.CTkOptionMenu(
            dialog,
            values=account_names,
            variable=account_var,
            width=300
        )
        account_menu.pack(pady=5)
        
        # Target Amount
        ctk.CTkLabel(dialog, text="S·ªë Ti·ªÅn M·ª•c Ti√™u:", font=("Helvetica", 14, "bold")).pack(pady=5)
        target_entry = ctk.CTkEntry(dialog, width=300)
        target_entry.pack(pady=5)
        
        # Initial Amount
        ctk.CTkLabel(dialog, text="S·ªë Ti·ªÅn Ban ƒê·∫ßu:", font=("Helvetica", 14, "bold")).pack(pady=5)
        initial_entry = ctk.CTkEntry(dialog, width=300)
        initial_entry.pack(pady=5)
        
        # Deadline
        ctk.CTkLabel(dialog, text="H·∫°n Ch√≥t:", font=("Helvetica", 14, "bold")).pack(pady=5)
        deadline_entry = ctk.CTkEntry(dialog, width=300)
        deadline_entry.insert(0, (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%d"))
        deadline_entry.pack(pady=5)
        
        # Note
        ctk.CTkLabel(dialog, text="Ghi Ch√∫:", font=("Helvetica", 14, "bold")).pack(pady=5)
        note_entry = ctk.CTkEntry(dialog, width=300)
        note_entry.pack(pady=5)
        
        def save_goal():
            try:
                target_amount = float(target_entry.get())
                initial_amount = float(initial_entry.get())
                
                if target_amount <= 0:
                    messagebox.showerror("L·ªói", "S·ªë ti·ªÅn m·ª•c ti√™u ph·∫£i l·ªõn h∆°n 0!")
                    return
                    
                if initial_amount < 0:
                    messagebox.showerror("L·ªói", "S·ªë ti·ªÅn ban ƒë·∫ßu kh√¥ng th·ªÉ √¢m!")
                    return
                    
                # Get selected account
                account = next(acc for acc in accounts if acc.name == account_var.get())
                
                # Check if account has enough balance
                if account.balance < initial_amount:
                    messagebox.showerror("L·ªói", "S·ªë d∆∞ t√†i kho·∫£n kh√¥ng ƒë·ªß!")
                    return
                
                # Create new saving goal
                savings = Saving.get_all()
                new_id = len(savings) + 1
                
                saving = Saving(
                    goal_id=new_id,
                    name=name_entry.get(),
                    target_amount=target_amount,
                    current_amount=initial_amount,
                    deadline=deadline_entry.get(),
                    account_id=account.account_id,
                    note=note_entry.get()
                )
                
                # Update account balance
                account.balance -= initial_amount
                account.save()
                
                # Save saving goal
                saving.save()
                
                dialog.destroy()
                self.refresh_savings_list()
                messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ th√™m m·ª•c ti√™u ti·∫øt ki·ªám m·ªõi!")
                
            except ValueError:
                messagebox.showerror("L·ªói", "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá!")
            except Exception as e:
                messagebox.showerror("L·ªói", str(e))
                
        save_btn = ctk.CTkButton(
            dialog,
            text="L∆∞u",
            command=save_goal,
            width=200,
            height=40,
            font=("Helvetica", 14, "bold")
        )
        save_btn.pack(pady=20)
        
    def edit_selected_goal(self):
        selected_items = self.tree.selection()
        if not selected_items:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn m·ª•c ti√™u c·∫ßn ch·ªânh s·ª≠a!")
            return
            
        item = selected_items[0]
        goal_id = int(self.tree.item(item)['values'][0])
        
        savings = Saving.get_all()
        saving = next((s for s in savings if s.goal_id == goal_id), None)
        
        if saving:
            self.show_edit_dialog(saving)
            
    def delete_selected_goal(self):
        selected_items = self.tree.selection()
        if not selected_items:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn m·ª•c ti√™u c·∫ßn x√≥a!")
            return
            
        item = selected_items[0]
        goal_id = int(self.tree.item(item)['values'][0])
        
        if not messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a m·ª•c ti√™u n√†y?"):
            return
            
        try:
            # Get saving goal info before deleting
            savings = Saving.get_all()
            saving = next((s for s in savings if s.goal_id == goal_id), None)
            
            if saving:
                # Return money to account
                account = Account.get_by_id(saving.account_id)
                if account:
                    account.balance += saving.current_amount
                    account.save()
                
                # Delete saving goal
                Saving.delete(goal_id)
                self.refresh_savings_list()
                messagebox.showinfo("Th√†nh c√¥ng", 
                                  f"ƒê√£ x√≥a m·ª•c ti√™u v√† ho√†n l·∫°i {saving.current_amount:,.0f} VND "
                                  f"v√†o t√†i kho·∫£n {account.name}")
                
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ x√≥a m·ª•c ti√™u: {str(e)}")